# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.js.jsx':

  'Import Module':
    'prefix': 'imm'
    'body': "import ${1:member} from '${2:module}'"

  'This State':
    'prefix': 'ts',
    'body': "this.state.${1}"

  'React ES6 Component':
    'prefix': 'rc',
    'body': """
      import React from 'react'

      export default class ${1:Component} extends React.Component {
        render () {
          return (
            <div>
              ${2}
            </div>
          )
        }
      }
    """

  'React Component + Constructor':
    'prefix': 'rcc',
    'body': """
      import React from 'react'

      const {  } = React.PropTypes

      propTypes = {

      }

      export default class ${1:Component} extends React.Component {
        constructor (props) {
          super(props)
        }

        render () {
          return (
            <div>
              ${2}
            </div>
          )
        }
      }

      ${1}.propTypes = propTypes

      export default ${1}
    """

  'React Constructor':
    'prefix': 'rconst',
    'body': """
      constructor (props) {
        super(props)
        ${1}
      }
    """

    'React Stateless Component':
      'prefix': 'rsc',
      'body': """
        import React from 'react'

        const {  } = React.PropTypes

        propTypes = {

        }

        const ${1:Component} = (props) => (
          <div>
            ${2}
          </div>
        )

        ${1}.propTypes = propTypes

        export default ${1}
      """

  'React Stateless Function':
    'prefix': 'rsf',
    'body': """
      import React from 'react'

      const ${1:Component} = (${2:}) => (
        <div>
          {${2}}
        </div>
      )
    """

  'React bind to this':
    'prefix': 'rbt',
    'body': """
      this.${1} = this.${1}.bind(this)
    """

  'React props definition':
    'prefix': 'rp',
    'body': """
      ${1:Component}.propTypes = {
        ${2}
      }
    """

  # className
  'React className attribute':
    'prefix': 'cn',
    'body': "className='${1}'"

  # PropType string
  'React PropType string':
    'prefix': 'rpstr',
    'body': "${1:prop}: PropTypes.string,"
  'React PropType string required':
    'prefix': 'rpstrr',
    'body': "${1:prop}:: PropTypes.string.isRequired,"

  # PropType number
  'React PropType number':
    'prefix': 'rpn',
    'body': "${1:prop}: PropTypes.number,"
  'React PropType number required':
    'prefix': 'rpnr',
    'body': "${1:prop}: PropTypes.number.isRequired,"

  # PropType object
  'React PropType object':
    'prefix': 'rpo',
    'body': "${1:prop}: PropTypes.object,"
  'React PropType object required':
    'prefix': 'rpor',
    'body': "${1:prop}: PropTypes.object.isRequired,"

  # PropType array
  'React PropType array':
    'prefix': 'rpa',
    'body': "${1:prop}: PropTypes.array,"
  'React PropType array required':
    'prefix': 'rpar',
    'body': "${1:prop}: PropTypes.array.isRequired,"

  # PropType bool
  'React PropType bool':
    'prefix': 'rpb',
    'body': "${1:prop}: PropTypes.bool,"
  'React PropType bool required':
    'prefix': 'rpbr',
    'body': "${1:prop}: PropTypes.bool.isRequired,"

  # PropType element
  'React PropType element':
    'prefix': 'rpe',
    'body': "${1:prop}: PropTypes.element,"
  'React PropType element required':
    'prefix': 'rper',
    'body': "${1:prop}: PropTypes.element.isRequired,"

  # PropType function
  'React PropType function':
    'prefix': 'rpf',
    'body': "${1:prop}: PropTypes.func,"
  'React PropType function required':
    'prefix': 'rpfr',
    'body': "${1:prop}: PropTypes.func.isRequired,"

  # PropType shape
  'React PropType shape':
    'prefix': 'rps',
    'body': """
      ${1:prop}: PropTypes.shape({
        ${2}
      }),
    """
  'React PropType shape required':
    'prefix': 'rpsr',
    'body': """
      ${1:prop}: PropTypes.shape({
        ${2}
      }).isRequired,
    """
